               ::::::::   ::::::::  :::::::::  ::::::::::
              :+:    :+: :+:    :+: :+:    :+: :+:
              +:+        +:+        +:+    +:+ +:+
              +#++:++#++ +#++:++#++ +#+    +:+ +#++:++#
                     +#+        +#+ +#+    +#+ +#+
              #+#    #+# #+#    #+# #+#    #+# #+#
               ########   ########  #########  ##########

                The Small Scalable Disassembler Engine
Copyright (C) 2015-2016, Constantine Shablya. See Copyright Notice in LICENSE.md
                  https://github.com/notnanocat/ssde



  1 What is SSDE?
  2 "Why does SSDE exist, if disassembler engines such as HDE, diStorm,
      BeaEngine etc already exist?" or "The advantages of SSDE"
    2.1 Performance and benchmarks
  3 Is SSDE thread safe?


1 What is SSDE?

  SSDE is a small, scalable disassembly engine purposed for analysis of machine
  code and retrieving information on instructions (their length, opcode,
  correctness, etc).

  SSDE is quite functional, e.g.: you can build a complete disassembler which
  would output assembly listing of the program generated from machine code
  using SSDE. Scalability of SSDE lets you perform analysis on data at the same
  time using multiple threads.


2 "Why does SSDE exist, if disassembler engines such as HDE, diStorm,
  BeaEngine etc already exist?" or "The advantages of SSDE"

  Motivation for writing SSDE was that existing disassembler engines were
  either large and/or were not free, or they were obsolete and wouldn't
  support new instructions, or were not maintained. SSDE is licensed under MIT
  license, which lets you use it in your private or commerical projects without
  any kinds of restrictions and/or liabilities. Other than that, it's planned
  to support different architectures. SSDE modules are written with portability
  in mind: they should work on any machine, regardless of processor
  architecture, endianness, OS etc. All SSDE code is written in C++11.

  Main advantages of SSDE:
    - modularity (use only what is required)
    - high performance when analyzing long sequences of machine code
    - decoding behaviour similar to real cpu
    - small size
    - independent from processor architecture, byte order and OS
    - free to use

  inst_x86 module supports these extensions:
    AES, SHA, VMX, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, FMA3
    also other minor extensions: CPUID, ADX, RDSEED, RDRAND etc

  inst_x64 supports extensions listed above aswell, though other than that, it
    also supports REX prefix and VEX bits that are ignored in x86

  2.1 Performance and benchmarks
    On i3-2350m@2.3GHz average time per instruction

    SSDE   : 10.086μs
    HDE32C : 5.862μs


3 Is SSDE thread safe?

  Yes, SSDE is thread safe as long as only one thread operates on the instance
  of ssde::Disasm_?? and/or ssde::Inst_??.